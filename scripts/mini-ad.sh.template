#!/bin/bash
#--------------------------------------------------------------------
# Ensure SSM Agent is installed and running for remote management
#--------------------------------------------------------------------
snap install amazon-ssm-agent --classic
systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service

#--------------------------------------------------------------------
# Load configuration variables from environment
#--------------------------------------------------------------------
REALM="${REALM}"
DNS_ZONE="${DNS_ZONE}"
NETBIOS="${NETBIOS}"
HOSTNAME_DC="${HOSTNAME_DC}"
ADMINISTRATOR_PASS="${ADMINISTRATOR_PASS}"
ADMIN_USER_PASS="${ADMIN_USER_PASS}"

#--------------------------------------------------------------------
# Write the seeded users/groups JSON to a temp file
#--------------------------------------------------------------------
cat > /root/seed_users.json <<'EOF'
${USERS_JSON}
EOF
chmod 600 /root/seed_users.json

#--------------------------------------------------------------------
# Install necessary packages for Active Directory Domain Controller
#--------------------------------------------------------------------

export DEBIAN_FRONTEND=noninteractive
apt-get update >> /root/userdata.log 2>&1
apt-get install -y samba krb5-user winbind smbclient dnsutils acl attr chrony unzip ldb-tools python3-flask >> /root/userdata.log 2>&1

#--------------------------------------------------------------------
# Install AWS CLI
#--------------------------------------------------------------------

curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
unzip -q /tmp/awscliv2.zip -d /tmp
sudo /tmp/aws/install --update >> /root/userdata.log 2>&1
rm -rf /tmp/aws /tmp/awscliv2.zip

#--------------------------------------------------------------------
# Prepare secrets file with restrictive permissions
#--------------------------------------------------------------------
SECRETS_FILE="/root/ad-secrets.txt"
mkdir -p /root
: > "$SECRETS_FILE"
chmod 600 "$SECRETS_FILE"

#--------------------------------------------------------------------
# Prevent cloud-init from altering the hostname
#--------------------------------------------------------------------
mkdir -p /etc/cloud/cloud.cfg.d
cat > /etc/cloud/cloud.cfg.d/99-preserve-hostname.cfg <<EOF
preserve_hostname: true
EOF

#--------------------------------------------------------------------
# Set the appropriate hostname for the Domain Controller
#--------------------------------------------------------------------
hostnamectl set-hostname "$HOSTNAME_DC"

#--------------------------------------------------------------------
# Determine the primary private IPv4 address and update /etc/hosts
#--------------------------------------------------------------------
IPV4=$(hostname -I | awk '{print $1}')
sed -i "/\b${HOSTNAME_DC}\b/d" /etc/hosts || true
echo "$IPV4  ${HOSTNAME_DC}.${DNS_ZONE} ${HOSTNAME_DC}" >> /etc/hosts

#--------------------------------------------------------------------
# Preconfigure Kerberos to prevent interactive prompts during install
#--------------------------------------------------------------------

debconf-set-selections <<< "krb5-config krb5-config/default_realm string ${REALM}"
debconf-set-selections <<< "krb5-config krb5-config/kerberos_servers string"
debconf-set-selections <<< "krb5-config krb5-config/admin_server string"

#--------------------------------------------------------------------
# Configure Chrony to sync with AWS Time Sync service
#--------------------------------------------------------------------
if ! grep -q "169.254.169.123" /etc/chrony/chrony.conf; then
  sed -i 's/^pool .*//g' /etc/chrony/chrony.conf || true
  cat >> /etc/chrony/chrony.conf <<EOF
server 169.254.169.123 prefer iburst
makestep 1.0 3
rtcsync
EOF
fi
systemctl enable --now chrony

#--------------------------------------------------------------------
# Disable traditional Samba daemons to avoid conflicts with DC mode
#--------------------------------------------------------------------
systemctl stop smbd nmbd winbind || true
systemctl disable smbd nmbd winbind || true

#--------------------------------------------------------------------
# Provision the Domain Controller if not already provisioned
#--------------------------------------------------------------------
if [ ! -f /var/lib/samba/private/sam.ldb ]; then
  mv /etc/samba/smb.conf /etc/samba/smb.conf.bak 2>/dev/null || true
  samba-tool domain provision \
    --use-rfc2307 \
    --realm="${REALM}" \
    --domain="${NETBIOS}" \
    --server-role=dc \
    --dns-backend=SAMBA_INTERNAL \
    --host-name="${HOSTNAME_DC}" \
    --adminpass="${ADMINISTRATOR_PASS}"

  sed -i '/^\s*dns forwarder\s*=/d' /etc/samba/smb.conf
  sed -i '/^\[global\]/a dns forwarder = 169.254.169.253' /etc/samba/smb.conf
  cp /var/lib/samba/private/krb5.conf /etc/krb5.conf

  systemctl enable samba-ad-dc
  systemctl restart samba-ad-dc
fi

#--------------------------------------------------------------------
# Disable systemd-resolved to manage DNS manually
#--------------------------------------------------------------------
systemctl stop systemd-resolved || true
systemctl disable systemd-resolved || true

#--------------------------------------------------------------------
# Configure /etc/resolv.conf with local resolver and fallback
#--------------------------------------------------------------------
if [ -L /etc/resolv.conf ]; then
  rm -f /etc/resolv.conf
fi
cat > /etc/resolv.conf <<EOF
search ${DNS_ZONE}
nameserver 127.0.0.1
nameserver 169.254.169.253
EOF
chattr +i /etc/resolv.conf || true

#--------------------------------------------------------------------
# Allow services to stabilize
#--------------------------------------------------------------------
sleep 5

#--------------------------------------------------------------------
# Validate Kerberos authentication for Administrator principal
#--------------------------------------------------------------------
kinit Administrator@${REALM} <<< "${ADMINISTRATOR_PASS}" || true
klist || true
kdestroy || true

#--------------------------------------------------------------------
# Create a day-to-day Admin user with Domain Admin privileges, if needed
#--------------------------------------------------------------------
if ! samba-tool user show Admin >/dev/null 2>&1; then
  samba-tool user create Admin "${ADMIN_USER_PASS}"
  samba-tool group addmembers "Domain Admins" Admin
  samba-tool user setexpiry Admin --noexpiry
  samba-tool user setexpiry Administrator --noexpiry
fi

#--------------------------------------------------------------------
# Record provisioning details and credentials for reference
#--------------------------------------------------------------------
{
  echo "==== Mini-AD Provisioned ===="
  echo "Date: $(date -Is)"
  echo "Realm: ${REALM}"
  echo "DNS Zone: ${DNS_ZONE}"
  echo "NetBIOS Domain: ${NETBIOS}"
  echo "DC Hostname: ${HOSTNAME_DC}"
  echo "DC IP: $IPV4"
  echo
  echo "Administrator password: ${ADMINISTRATOR_PASS}"
  echo "Admin (Domain Admins) password: ${ADMIN_USER_PASS}"
  echo
  echo "Useful checks:"
  echo "  samba-tool domain level show"
  echo "  samba-tool drs showrepl"
  echo "  host -t SRV _ldap._tcp.${REALM}"
  echo "  host -t SRV _kerberos._tcp.${REALM}"
} >> "$SECRETS_FILE"

#--------------------------------------------------------------------
# JSON-driven Groups and Users Seeding
#--------------------------------------------------------------------
SEED_FILE="/root/seed_users.json"

# Load domain info from JSON
DNS_ZONE=$(jq -r '.domain.dnsZone' "$SEED_FILE")
NETBIOS=$(jq -r '.domain.netbios' "$SEED_FILE")
USER_BASE_DN=$(jq -r '.domain.userBaseDn // empty' "$SEED_FILE")

# Default userBaseDn if not provided
if [ -z "$USER_BASE_DN" ]; then
  DOMAIN_DN=$(echo "$DNS_ZONE" | awk -F. '{ for (i=1; i<=NF; i++) printf "DC=%s%s", $i, (i<NF?",":"") }')
  USER_BASE_DN="CN=Users,$DOMAIN_DN"
fi

# -------------------------------------------------------------------
# Create Groups
# -------------------------------------------------------------------
jq -c '.groups[]' "$SEED_FILE" | while read -r group; do
    NAME=$(echo "$group" | jq -r .name)
    GID=$(echo "$group" | jq -r .gidNumber)

    if ! samba-tool group show "$NAME" >/dev/null 2>&1; then
        echo "Creating group: $NAME (gidNumber=$GID)"
        samba-tool group add "$NAME" \
            --nis-domain="${NETBIOS}" \
            --gid-number="$GID" \
            --description="Sample Group - $NAME" >> /root/ad_group_attributes.log 2>&1
    fi
done

# -------------------------------------------------------------------
# Create Users
# -------------------------------------------------------------------
jq -c '.users[]' "$SEED_FILE" | while read -r user; do
    USERNAME=$(echo "$user" | jq -r .username)
    GIVENNAME=$(echo "$user" | jq -r .givenName)
    SURNAME=$(echo "$user" | jq -r .surname)
    PASSWORD=$(echo "$user" | jq -r .password)
    UID_NUMBER=$(echo "$user" | jq -r .uidNumber)
    GID_NUMBER=$(echo "$user" | jq -r .gidNumber)
    PRIMARY_GROUP=$(echo "$user" | jq -r .primaryGroup)

    DISPLAYNAME="$GIVENNAME $SURNAME"
    EMAIL="$USERNAME@$DNS_ZONE"

    # If user doesn't already exist, create
    if ! samba-tool user show "$USERNAME" >/dev/null 2>&1; then
        echo "Creating user: $USERNAME"
        samba-tool user create "$USERNAME" "$PASSWORD" \
            --given-name="$GIVENNAME" \
            --surname="$SURNAME" \
            --mail-address="$EMAIL" \
            --description="Sample User - $DISPLAYNAME" >> /root/ad_user_attributes.log 2>&1

        # Add to primary group
        samba-tool group addmembers "$PRIMARY_GROUP" "$USERNAME" >> /root/ad_user_attributes.log 2>&1

        # Add RFC2307 / UNIX attributes
        ldbmodify -H /var/lib/samba/private/sam.ldb <<EOF
dn: CN=$DISPLAYNAME,$USER_BASE_DN
changetype: modify
add: objectClass
objectClass: posixAccount
-
replace: uid
uid: $USERNAME
-
replace: uidNumber
uidNumber: $UID_NUMBER
-
replace: gidNumber
gidNumber: $GID_NUMBER
-
replace: loginShell
loginShell: /bin/bash
-
replace: unixHomeDirectory
unixHomeDirectory: /home/$USERNAME
-
replace: msSFU30NisDomain
msSFU30NisDomain: $NETBIOS
EOF
    fi

    # Add extra group memberships (safe with spaces like "Domain Admins")
    echo "$user" | jq -r '.extraGroups[]?' | while IFS= read -r grp; do
        echo "Adding user $USERNAME to group $grp" >> /root/ad_user_attributes.log 2>&1
        samba-tool group addmembers "$grp" "$USERNAME" >> /root/ad_user_attributes.log 2>&1
    done
done

#--------------------------------------------------------------------
# Create utility service for next uid and next gid
#--------------------------------------------------------------------

cd /
git clone https://github.com/mamonaco1973/module-aws-mini-ad.git
cd module-aws-mini-ad/scripts
cp maxids.service /etc/systemd/system/maxids.service
sudo systemctl daemon-reload
sudo systemctl enable maxids
sudo systemctl start maxids

#--------------------------------------------------------------------
# Reboot to ensure all changes are applied cleanly
#--------------------------------------------------------------------
reboot
